{
  "title": "Threema App Remote Protocol (ARP)",
  "description": "The protocol used to exchange data between the Threema app and a client (e.g. [Threema Web](https://threema.ch/en/threema-web)).",
  "version": "2.0.0",
  "sharedFields": {
    "success": {
      "field": "success",
      "description": "Whether the action was successful",
      "type": "Boolean",
      "optional": false,
      "nullable": false
    },
    "successUpdate": {
      "field": "success",
      "description": "Whether the update succeeded",
      "type": "Boolean",
      "optional": false,
      "nullable": false
    },
    "error": {
      "field": "error",
      "description": "An error code (if the action failed)",
      "type": "String",
      "optional": true,
      "nullable": false
    },
    "receiverId": {
      "field": "id",
      "description": "The receiver identity",
      "type": "String",
      "optional": false,
      "nullable": false
    },
    "receiverType": {
      "field": "type",
      "description": "The receiver type",
      "type": "String",
      "enum": ["\"me\"", "\"contact\"", "\"group\"", "\"distributionList\""],
      "optional": false,
      "nullable": false
    },
    "receiverTypeWithoutMe": {
      "field": "type",
      "description": "The receiver type",
      "type": "String",
      "enum": ["\"contact\"", "\"group\"", "\"distributionList\""],
      "optional": false,
      "nullable": false
    },
    "temporaryId": {
      "field": "temporaryId",
      "description": "A [Temporary ID](concept-temporaryid.html) for this message generated by the client",
      "type": "String",
      "optional": false,
      "nullable": false
    },
    "temporaryIdOptional": {
      "field": "temporaryId",
      "description": "A [Temporary ID](concept-temporaryid.html) for this message generated by the client<br>Only set if this is a response to an update request.",
      "type": "String",
      "optional": true,
      "nullable": false
    },
    "updateMode": {
      "field": "mode",
      "description": "The update mode",
      "type": "String",
      "enum": ["\"new\"", "\"modified\"", "\"removed\""],
      "optional": false,
      "nullable": false
    }
  },
  "models": {
    "Connection": {
      "fields": [
        {
          "field": "id",
          "description": "The [Connection ID](concept-connectionid.html) of the connection to be resumed",
          "type": "Binary",
          "optional": false,
          "nullable": false
        },
        {
          "field": "sequenceNumber",
          "description": "The [Sequence Number](concept-sequencenumber.html) of the last message received during the connection",
          "type": "Integer (u32)",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Quote": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity that authored the quote",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "text",
          "description": "The quote text",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Contact": {
      "fields": [
        {
          "field": "id",
          "description": "The Threema identity",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "displayName",
          "description": "The contact display name",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "color",
          "description": "The contact color in hex notation (e.g. `\"#1122FF\"`)",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "firstName",
          "description": "The contact first name",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "lastName",
          "description": "The contact last name",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "publicNickname",
          "description": "The contact public nickname (without preceding `~`)",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "verificationLevel",
          "description": "The verification level<br>1: Unverified (red)<br>2: Server verified (yellow)<br>3: Fully verified (green)",
          "type": "Integer",
          "enum": [1, 2, 3],
          "optional": false,
          "nullable": false
        },
        {
          "field": "state",
          "description": "The identity state",
          "type": "String",
          "enum": ["\"ACTIVE\"", "\"INACTIVE\""],
          "optional": false,
          "nullable": false
        },
        {
          "field": "featureMask",
          "description": "The feature mask (TODO: Document)",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "isWork",
          "description": "Whether this is a contact from the same Threema Work package.<br>Only relevant for Threema Work users.",
          "type": "Boolean",
          "optional": true,
          "nullable": false
        },
        {
          "field": "identityType",
          "description": "The identity type<br>0: Regular Threema user<br>1: Threema Work user",
          "type": "Integer",
          "enum": [0, 1],
          "optional": false,
          "nullable": false
        },
        {
          "field": "publicKey",
          "description": "The contact public key",
          "type": "Binary",
          "optional": false,
          "nullable": false
        },
        {
          "field": "locked",
          "description": "Whether the chat with this contact is locked. This is used for private chats.",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "visible",
          "description": "Whether the chat with this contact is visible. This is used for private chats.",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "hidden",
          "description": "The contact is hidden (e.g. because it is part of a group, but was never added to the address book or contacted)",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "access",
          "description": "The access object",
          "type": "Map<ContactReceiverAccess>",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Group": {
      "fields": [
        {
          "field": "id",
          "description": "The group identity",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "name",
          "description": "The group name",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "displayName",
          "description": "The group display name",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "color",
          "description": "The group color in hex notation (e.g. `\"#1122FF\"`)",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "createdAt",
          "description": "The group creation date as a unix time stamp in seconds",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "disabled",
          "description": "This is set to true if you're not a member of this group anymore",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": false
        },
        {
          "field": "locked",
          "description": "This is set to true if the chat is marked as a secret chat",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": false
        },
        {
          "field": "visible",
          "description": "This is set to false if the chat is marked as a secret chat and if secret chats are hidden in the app",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": true
        },
        {
          "field": "members",
          "description": "The list of group member identities",
          "type": "Array<String>",
          "optional": false,
          "nullable": false
        },
        {
          "field": "administrator",
          "description": "The Threema identity of the group admin",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "access",
          "description": "The access object",
          "type": "Map<GroupReceiverAccess>",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "DistributionList": {
      "fields": [
        {
          "field": "id",
          "description": "The distribution list ID",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "displayName",
          "description": "The distribution list display name",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "color",
          "description": "The group color in hex notation (e.g. `\"#1122FF\"`)",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "locked",
          "description": "This is set to true if the chat is marked as a secret chat",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": false
        },
        {
          "field": "visible",
          "description": "This is set to false if the chat is marked as a secret chat and if secret chats are hidden in the app",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": true
        },
        {
          "field": "members",
          "description": "The list of group member identities",
          "type": "Array<String>",
          "optional": false,
          "nullable": false
        },
        {
          "field": "access",
          "description": "The access object",
          "type": "Map<DistributionListReceiverAccess>",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Conversation": {
      "fields": [
        {
          "field": "type",
          "description": "The receiver type",
          "type": "String",
          "enum": ["\"me\"", "\"contact\"", "\"group\"", "\"distributionList\""],
          "optional": false,
          "nullable": false
        },
        {
          "field": "id",
          "description": "The identity of the responder",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "position",
          "description": "Used for sorting, first conversation starts at index 0",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "messageCount",
          "description": "Number of messages",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "unreadCount",
          "description": "Number of unread messages",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "latestMessage",
          "description": "The latest message content",
          "type": "Map<Message>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "receiver",
          "description": "The receiver",
          "type": "Map<Receiver>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "avatar",
          "description": "The avatar of the receiver. Only set for the top 20-30 conversations.",
          "type": "Binary",
          "optional": true,
          "nullable": false
        },
        {
          "field": "notifications",
          "description": "Notification settings",
          "type": "Map<NotificationSettings>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "isStarred",
          "description": "Is the conversation starred?",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": false
        }
      ]
    },
    "NotificationSettings": {
      "fields": [
        {
          "field": "sound",
          "description": "Notification sound settings",
          "type": "Map<NotificationSound>",
          "optional": false,
          "nullable": false
        },
        {
          "field": "dnd",
          "description": "Do not disturb settings",
          "type": "Map<NotificationDnd>",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "NotificationSound": {
      "fields": [
        {
          "field": "mode",
          "description": "The notification mode",
          "type": "String",
          "enum": ["\"default\"", "\"muted\""],
          "optional": false,
          "nullable": false
        }
      ]
    },
    "NotificationDnd": {
      "fields": [
        {
          "field": "mode",
          "description": "The do not disturb mode",
          "type": "String",
          "enum": ["\"off\"", "\"on\"", "\"until\""],
          "optional": false,
          "nullable": false
        },
        {
          "field": "mentionsOnly",
          "description": "Only notify on mentions. May be used with modes \"on\" or \"until\".",
          "type": "String",
          "enum": ["\"off\"", "\"on\"", "\"until\""],
          "optional": true,
          "nullable": false,
          "default": false
        },
        {
          "field": "until",
          "description": "Unix timestamp in milliseconds. Must be set if mode is \"until\".",
          "type": "Integer",
          "optional": true,
          "nullable": false
        }
      ]
    },
    "Configuration": {
      "fields": [
        {
          "field": "voipEnabled",
          "description": "Are calls enabled?",
          "type": "Boolean",
          "optional": true,
          "default": true,
          "nullable": false
        },
        {
          "field": "voipForceTurn",
          "description": "Force all VoIP traffic to go through the TURN server",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "largeSingleEmoji",
          "description": "Show single emoji with a larger font size",
          "type": "Boolean",
          "optional": true,
          "default": true,
          "nullable": false
        },
        {
          "field": "showInactiveIDs",
          "description": "Whether to show inactive IDs in the contact list",
          "type": "Boolean",
          "optional": true,
          "default": true,
          "nullable": false
        }
      ]
    },
    "Capabilities": {
      "fields": [
        {
          "field": "maxGroupSize",
          "description": "The supported group size",
          "type": "Integer",
          "optional": true,
          "default": 50,
          "nullable": false
        },
        {
          "field": "maxFileSize",
          "description": "The max file size for files being sent (bytes)",
          "type": "Integer",
          "optional": true,
          "default": 52428800,
          "nullable": false
        },
        {
          "field": "distributionLists",
          "description": "Whether distribution lists are supported by the device",
          "type": "Boolean",
          "optional": true,
          "default": true,
          "nullable": false
        },
        {
          "field": "imageFormat",
          "description": "The image format used",
          "type": "Map<ImageFormat>",
          "optional": false,
          "nullable": false
        },
        {
          "field": "mdm",
          "description": "MDM configuration",
          "type": "Map<MdmRestrictions>",
          "optional": true,
          "nullable": false
        }
      ]
    },
    "ImageFormat": {
      "fields": [
        {
          "field": "avatar",
          "description": "The avatar mime type, for example `image/png`",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "thumbnail",
          "description": "The thumbnail mime type, for example `image/jpeg`",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "MdmRestrictions": {
      "fields": [
        {
          "field": "disableAddContact",
          "description": "Set to true to disable adding of new contacts",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "disableCreateGroup",
          "description": "Set to true to disable the creation of groups",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "disableSaveToGallery",
          "description": "Set to true to make it harder to download media (hide download button)",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "disableExport",
          "description": "Set to true to disable exporting of chats",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "disableMessagePreview",
          "description": "Set to true to disable message contents in desktop notifications",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "disableCalls",
          "description": "Set to true to disable VoIP calls",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        },
        {
          "field": "readonlyProfile",
          "description": "Set to true if editing the profile was disabled by an MDM setting",
          "type": "Boolean",
          "optional": true,
          "default": false,
          "nullable": false
        }
      ]
    },
    "ContactDetails": {
      "fields": [
        {
          "field": "systemContact",
          "description": "System contact details",
          "type": "Map<SystemContact>",
          "optional": true,
          "nullable": false
        }
      ]
    },
    "SystemContact": {
      "fields": [
        {
          "field": "emails",
          "description": "E-Mail addresses",
          "type": "Array<Email>",
          "optional": false,
          "nullable": false
        },
        {
          "field": "phoneNumbers",
          "description": "Phone numbers",
          "type": "Array<Phone>",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Email": {
      "fields": [
        {
          "field": "label",
          "description": "Category label",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "address",
          "description": "E-Mail address",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Phone": {
      "fields": [
        {
          "field": "label",
          "description": "Category label",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "number",
          "description": "Phone number",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Message": {
      "fields": [
        {
          "field": "type",
          "description": "The message type",
          "enum": [
            "\"text\"",
            "\"image\"",
            "\"video\"",
            "\"file\"",
            "\"location\"",
            "\"voipStatus\""
          ],
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "id",
          "description": "The message id",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "body",
          "description": "The message body",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "thumbnail",
          "description": "The message thumbnail",
          "type": "Map<Thumbnail>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "date",
          "description": "The message date (last update) as a unix timestamp in seconds",
          "type": "Integer",
          "optional": true,
          "nullable": false
        },
        {
          "field": "events",
          "description": "A list of message events",
          "type": "Array<MessageEvent>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "sortKey",
          "description": "A number used for sorting messages, higher means newer",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "partnerId",
          "description": "The identity of the sender of this message",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "isOutbox",
          "description": "Whether this message was sent by the user",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "isStatus",
          "description": "Whether this is a status message",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "statusType",
          "description": "The status message type",
          "type": "String",
          "enum": ["\"text\"", "\"firstUnreadMessage\""],
          "optional": true,
          "nullable": false
        },
        {
          "field": "caption",
          "description": "The message caption",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "unread",
          "description": "Whether this message is unread",
          "type": "Boolean",
          "optional": true,
          "nullable": false,
          "default": false
        },
        {
          "field": "state",
          "description": "The message state",
          "type": "String",
          "enum": [
            "\"delivered\"",
            "\"read\"",
            "\"send-failed\"",
            "\"sent\"",
            "\"user-ack\"",
            "\"user-dec\"",
            "\"pending\"",
            "\"sending\""
          ],
          "optional": true,
          "nullable": false
        },
        {
          "field": "quote",
          "description": "The message quote",
          "type": "Map<Quote>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "file",
          "description": "The file info",
          "type": "Map<File>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "video",
          "description": "The video info",
          "type": "Map<Video>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "audio",
          "description": "The audio info",
          "type": "Map<Audio>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "location",
          "description": "The location info",
          "type": "Map<Location>",
          "optional": true,
          "nullable": false
        },
        {
          "field": "voip",
          "description": "The voip status info",
          "type": "Map<VoIP>",
          "optional": true,
          "nullable": false
        }
      ]
    },
    "Thumbnail": {
      "fields": [
        {
          "field": "height",
          "description": "The height of the thumbnail (max 400px)",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "width",
          "description": "The width of the thumbnail (max 400px)",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "preview",
          "description": "The thumbnail preview. This should be resized so that no side is larger than 50px.",
          "type": "Binary",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "MessageEvent": {
      "fields": [
        {
          "field": "date",
          "description": "The event date (last update) as a unix time stamp in seconds",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "type",
          "description": "The event type",
          "type": "String",
          "enum": [
            "\"created\"",
            "\"sent\"",
            "\"delivered\"",
            "\"read\"",
            "\"acked\"",
            "\"modified\""
          ],
          "optional": false,
          "nullable": false
        }
      ]
    },
    "File": {
      "fields": [
        {
          "field": "name",
          "description": "The file name",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "size",
          "description": "The file size in bytes",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "type",
          "description": "The file MIME type",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "inApp",
          "description": "TODO",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Video": {
      "fields": [
        {
          "field": "duration",
          "description": "The video duration in seconds",
          "type": "Integer",
          "optional": false,
          "nullable": false
        },
        {
          "field": "size",
          "description": "The video file size in bytes",
          "type": "Integer",
          "optional": true,
          "nullable": false
        }
      ]
    },
    "Audio": {
      "fields": [
        {
          "field": "duration",
          "description": "The duration of the audio message in seconds",
          "type": "Integer",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "Location": {
      "fields": [
        {
          "field": "lat",
          "description": "WSG84 latitude",
          "type": "Float",
          "optional": false,
          "nullable": false
        },
        {
          "field": "lon",
          "description": "WSG84 longitude",
          "type": "Float",
          "optional": false,
          "nullable": false
        },
        {
          "field": "accuracy",
          "description": "The horizontal accuracy in emters ([the radius of 68% confidence](https://stackoverflow.com/a/13807786/284318))",
          "type": "Float",
          "optional": false,
          "nullable": false
        },
        {
          "field": "address",
          "description": "The address belonging to this location",
          "type": "String",
          "optional": true,
          "nullable": false
        },
        {
          "field": "description",
          "description": "Description text for this location",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoIP": {
      "fields": [
        {
          "field": "status",
          "description": "The type of VoIP status message<br>1: Missed<br>2: Finished<br>3: Rejected<br>4: Aborted",
          "type": "Integer",
          "enum": [1, 2, 3, 4],
          "optional": false,
          "nullable": false
        },
        {
          "field": "duration",
          "description": "The duration of the call in seconds",
          "type": "Integer",
          "optional": true,
          "nullable": false
        },
        {
          "field": "reason",
          "description": "The reject reason<br>0: Unknown<br>1: Busy<br>2: Timeout<br>3: Rejected",
          "type": "Integer",
          "enum": [0, 1, 2, 3],
          "optional": true,
          "nullable": false
        }
      ]
    },
    "ContactReceiverAccess": {
      "fields": [
        {
          "field": "canDelete",
          "description": "Whether this contact can be deleted",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeAvatar",
          "description": "Whether the avatar of this group can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeFirstName",
          "description": "Whether the first name of this contact can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeLastName",
          "description": "Whether the last name of this contact can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "GroupReceiverAccess": {
      "fields": [
        {
          "field": "canDelete",
          "description": "Whether this group can be deleted",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeAvatar",
          "description": "Whether the group avatar can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeName",
          "description": "Whether the group name can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeMembers",
          "description": "Whether the group members can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canLeave",
          "description": "Whether this group can be left",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canSync",
          "description": "Whether the group can be re-synced",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "DistributionListReceiverAccess": {
      "fields": [
        {
          "field": "canDelete",
          "description": "Whether this distribution list can be deleted",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "canChangeMembers",
          "description": "Whether the distribution list members can be changed",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoipRinging": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity of the call partner",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoipStarted": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity of the call partner",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "outgoing",
          "description": "Whether this is an outgoing (`true`) or incoming (`false`) call",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoipFinished": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity of the call partner",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "outgoing",
          "description": "Whether this is an outgoing (`true`) or incoming (`false`) call",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "duration",
          "description": "The call duration in seconds",
          "type": "Integer",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoipRejected": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity of the call partner",
          "type": "String",
          "optional": false,
          "nullable": false
        },
        {
          "field": "outgoing",
          "description": "Whether this is an outgoing (`true`) or incoming (`false`) call",
          "type": "Boolean",
          "optional": false,
          "nullable": false
        },
        {
          "field": "reason",
          "description": "The reject reason",
          "type": "String",
          "enum": [
            "\"busy\"",
            "\"timeout\"",
            "\"rejected\"",
            "\"unknown\""
          ],
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoipMissed": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity of the call partner",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    },
    "VoipAborted": {
      "fields": [
        {
          "field": "identity",
          "description": "The identity of the call partner",
          "type": "String",
          "optional": false,
          "nullable": false
        }
      ]
    }
  },
  "messages": {
    "create": {
      "contact": [
        {
          "direction": "fromapp",
          "summary": "Respond to a `create/contact` message.",
          "args": {
            "fields": [
              "@temporaryId",
              {
                "field": "identity",
                "description": "The identity of the contact that was created",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@success",
              "@error"
            ]
          },
          "data": {
            "description": "If `success=true`, send the following map, otherwise send no data field.",
            "fields": [
              {
                "field": "receiver",
                "description": "The contact",
                "type": "Map<Contact>",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "models": ["Contact", "ContactReceiverAccess"],
          "errorCodes": {
            "codes": {
              "invalidIdentity": "The identity is invalid",
              "disabledByPolicy": "Feature disabled by administrator",
              "internalError": "The contact could not be created due to an internal error"
            }
          }
        },
        {
          "direction": "toapp",
          "summary": "Create a new contact.",
          "args": {
            "fields": [
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "identity",
                "description": "The identity of the contact that should be created",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "distributionList": [
        {
          "direction": "fromapp",
          "summary": "Respond to a `create/distributionList` message.",
          "args": {
            "fields": [
              "@temporaryId",
              "@success",
              "@error"
            ]
          },
          "data": {
            "description": "If `success=true`, send the following map, otherwise send no data field.",
            "fields": [
              {
                "field": "receiver",
                "description": "The distribution list",
                "type": "Map<DistributionList>",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "errorCodes": {
            "codes": {
              "badRequest": "Invalid request",
              "internalError": "The distribution list could not be created due to an internal error"
            }
          }
        },
        {
          "direction": "toapp",
          "summary": "Create a new distribution list.",
          "args": {
            "fields": [
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "members",
                "description": "The list of distribution list member identities",
                "type": "Array<String>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "name",
                "description": "The distribution list name",
                "type": "String",
                "optional": true,
                "nullable": false
              }
            ]
          }
        }
      ],
      "fileMessage": [
        {
          "direction": "fromapp",
          "summary": "Notify the client that a new message was created. This is a reply to the `create/fileMessage` message from the client.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              "@temporaryId",
              {
                "field": "success",
                "description": "Whether the message was sent successfully",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "fields": [
              {
                "field": "messageId",
                "description": "The message id of the new message",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          }
        },
        {
          "direction": "toapp",
          "summary": "Send a new file message",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "name",
                "description": "The filename",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "fileType",
                "description": "The MIME type of the file",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "sendAsFile",
                "description": "Force-send this item as file, even if it's an image or audio file",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              },
              {
                "field": "size",
                "description": "The file size in bytes",
                "type": "Integer",
                "optional": false,
                "nullable": false
              },
              {
                "field": "caption",
                "description": "Caption of the message",
                "type": "String",
                "optional": true,
                "nullable": false
              }
            ]
          }
        }
      ],
      "group": [
        {
          "direction": "fromapp",
          "summary": "Respond to a `create/group` message.",
          "args": {
            "fields": [
              "@temporaryId",
              "@success",
              "@error"
            ]
          },
          "data": {
            "description": "If `success=true`, send the following map, otherwise send no data field.",
            "fields": [
              {
                "field": "receiver",
                "description": "The group",
                "type": "Map<Group>",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "errorCodes": {
            "codes": {
              "disabledByPolicy": "Group creation was disabled by the administrator",
              "badRequest": "Invalid request",
              "internalError": "The group could not be created due to an internal error"
            }
          }
        },
        {
          "direction": "toapp",
          "summary": "Create a new group.",
          "args": {
            "fields": [
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "members",
                "description": "The list of group member identities",
                "type": "Array<String>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "name",
                "description": "The group name",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "avatar",
                "description": "The group avatar",
                "type": "Binary",
                "optional": true,
                "nullable": false
              }
            ]
          }
        }
      ],
      "textMessage": [
        {
          "direction": "fromapp",
          "summary": "Notify the client that a new message was created. This is a reply to the `create/textMessage` message from the client.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              "@temporaryId",
              {
                "field": "success",
                "description": "Whether the message was sent successfully",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "fields": [
              {
                "field": "messageId",
                "description": "The message id of the new message",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          }
        },
        {
          "direction": "toapp",
          "summary": "Send a new text message.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "text",
                "description": "The message text",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "quote",
                "description": "The quote",
                "type": "Map<Quote>",
                "optional": true,
                "nullable": false
              }
            ]
          },
          "models": ["Quote"]
        }
      ]
    },
    "delete": {
      "cleanReceiverConversation": [
        {
          "direction": "toapp",
          "summary": "Delete all messages in a conversation.",
          "args": {
            "fields": [
              "@receiverId",
              "@receiverTypeWithoutMe",
              "@temporaryId"
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidIdentity": "Receiver with the specified id not found",
              "badRequest": "Invalid request",
              "internalError": "An internal error occurred"
            }
          }
        }
      ],
      "distributionList": [
        {
          "direction": "toapp",
          "summary": "Delete a distribution list.",
          "args": {
            "fields": [
              "@receiverId",
              "@temporaryId"
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidDistributionList": "Distribution list not found",
              "badRequest": "Invalid request",
              "internalError": "The distribution list not be deleted due to an internal error"
            }
          }
        }
      ],
      "group": [
        {
          "direction": "toapp",
          "summary": "Leave or delete a group.",
          "response": "Either a `delete/group` or an `update/group` message will be sent by the app.",
          "args": {
            "fields": [
              "@receiverId",
              {
                "field": "deleteType",
                "description": "The type of deletion",
                "type": "String",
                "enum": ["\"leave\"", "\"delete\""],
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidGroup": "Group not found",
              "alreadyLeft": "You already left this group",
              "notAllowed": "Only the admin is allowed to delete a group",
              "badRequest": "Invalid argument"
            }
          }
        }
      ],
      "message": [
        {
          "direction": "toapp",
          "summary": "Delete a message.",
          "response": "The app responds with a `confirmAction` message.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The message id",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidMessage": "Message with the specified type / id / messageId was not found",
              "badRequest": "Invalid request"
            }
          }
        }
      ]
    },
    "request": {
      "connectionAck": [
        {
          "direction": "bidirectional",
          "summary": "Request an immediate chunk acknowledgement.\n\nThis SHOULD be requested before the connection is about to be closed.",
          "response": "The other peer will send a [`connectionAck` update](message-update-connectionAck-bidirectional.html). The connection SHOULD NOT be closed before having received that acknowledgement, so all cached chunks of the requesting peer can be safely discarded."
        }
      ],
      "ack": [
        {
          "direction": "toapp",
          "summary": "Acknowledge a message.",
          "response": "The app will send a message update.",
          "args": {
            "fields": [
              "@receiverTypeWithoutMe",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The id of the message to be acknowledged",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "acknowledged",
                "description": "Whether the message has been acknowledged (`true`) or declined (`false`)",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "avatar": [
        {
          "direction": "toapp",
          "summary": "Request the avatar of a receiver.",
          "response": "The app will send a `response/avatar` message.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "highResolution",
                "description": "Whether to send a high-resolution version of the avatar",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              },
              {
                "field": "maxSize",
                "description": "Max size in pixels of the low-res avatar.<br>Only sent if `highResolution=false`.",
                "type": "Integer",
                "optional": true,
                "nullable": false
              },
              "@temporaryId"
            ]
          }
        }
      ],
      "batteryStatus": [
        {
          "direction": "toapp",
          "summary": "Request battery status updates.",
          "response": "The app will respond with an initial `update/batteryStatus` message."
        }
      ],
      "blob": [
        {
          "direction": "toapp",
          "summary": "Request binary content (e.g. a file).",
          "response": "The app will respond with a `response/blob` message.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The ID of the message associated with the blob",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          }
        }
      ],
      "clientInfo": [
        {
          "direction": "toapp",
          "summary": "Request information about the device, send information about client.",
          "response": "The app will respond with a `response/clientInfo` message.",
          "data": {
            "fields": [
              {
                "field": "userAgent",
                "description": "A user agent string to identify the client",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "browserName",
                "description": "If the client is a browser, send the detected browser name, e.g. `firefox`, `ie`, `edge`, `opera`, `safari`",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "browserVersion",
                "description": "If the client is a browser, send the detected browser major version",
                "type": "Integer",
                "optional": true,
                "nullable": false
              }
            ]
          }
        }
      ],
      "contactDetail": [
        {
          "direction": "toapp",
          "summary": "Request the contact details (e.g. system contact)",
          "response": "response/contactDetail",
          "args": {
            "fields": [
              {
                "field": "identity",
                "description": "The identity of the contact",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          }
          }
      ],
      "conversations": [
        {
          "direction": "toapp",
          "summary": "Request the list of conversations",
          "response": "response/conversations",
          "args": {
            "fields": [
              {
                "field": "maxSize",
                "description": "Max side length (in px) of the receiver avatar",
                "type": "Integer",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "groupSync": [
        {
          "direction": "toapp",
          "summary": "Sync a group.",
          "response": "response/confirmAction",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The Threema identity of the receiver",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidGroup": "The identity is not a valid group",
              "notAllowed": "You are not allowed to modify this group",
              "syncFailed": "Synchronization failed",
              "internalError": "Internal error"
            }
          }
        }
      ],
      "messages": [
        {
          "direction": "toapp",
          "summary": "Request the messages of a conversation and subscribes to updates for this conversation.",
          "response": "response/messages and update/messages",
          "args": {
            "fields": [
              "@receiverTypeWithoutMe",
              "@receiverId",
              {
                "field": "refMsgId",
                "description": "The reference message id used for paging. If set, only return messages older than the specified message.",
                "type": "String",
                "optional": true,
                "nullable": false
              }
            ]
          }
        }
      ],
      "profile": [
        {
          "direction": "toapp",
          "summary": "Request the user profile.",
          "response": "response/profile"
        }
      ],
      "read": [
        {
          "direction": "toapp",
          "summary": "Mark a message as read.",
          "response": "update/messages",
          "args": {
            "fields": [
              "@receiverTypeWithoutMe",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The ID of the newest message that we read.",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "receivers": [
        {
          "direction": "toapp",
          "summary": "Request the list of receivers (e.g. contacts, groups, etc).",
          "response": "response/receivers"
        }
      ],
      "thumbnail": [
        {
          "direction": "toapp",
          "summary": "Request the thumbnail of a specified message.",
          "response": "response/thumbnail",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The ID of the message for which we want the thumbnail",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          }
        }
      ]
    },
    "response": {
      "avatar": [
        {
          "direction": "fromapp",
          "summary": "Respond with a requested contact avatar.",
          "args": {
            "fields": [
              "@receiverTypeWithoutMe",
              "@receiverId",
              "@temporaryId",
              {
                "field": "highResolution",
                "description": "Whether this is the high-resolution version of the avatar",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "description": "Either the avatar bytes (type `Binary`) if an avatar is available, or no data at all if no avatar is available."
          }
        }
      ],
      "blob": [
        {
          "direction": "fromapp",
          "summary": "Return binary content (e.g. a file).",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The ID of the message associated with the blob",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId",
              "@success",
              "@error"
            ]
          },
          "data": {
            "description": "The data is optional if an error happened.",
            "fields": [
              {
                "field": "blob",
                "description": "The binary data",
                "type": "Binary",
                "optional": false,
                "nullable": false
              },
              {
                "field": "type",
                "description": "The MIME type of the data",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "name",
                "description": "The filename",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "errorCodes": {
            "codes": {
              "blobDownloadFailed": "Could not download message from Threema server",
              "blobDecryptFailed": "Could not decrypt message",
              "internalError": "Internal error"
            }
          }
        }
      ],
      "clientInfo": [
        {
          "direction": "fromapp",
          "summary": "Send information about the device.",
          "data": {
            "fields": [
              {
                "field": "device",
                "description": "The device name",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "os",
                "description": "The operating system",
                "type": "String",
                "enum": ["\"android\"", "\"ios\""],
                "optional": false,
                "nullable": false
              },
              {
                "field": "osVersion",
                "description": "For example \"5.1\"",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "isWork",
                "description": "Whether this is a Threema Work app",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              },
              {
                "field": "pushToken",
                "description": "The GCM / APNS push token<br>APNS: This is the 32 byte hex encoded device token, followed by the endpoint (either \"p\" or \"s\") and the bundle ID, separated by semicolons.",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "configuration",
                "description": "The device configuration",
                "type": "Map<Configuration>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "capabilities",
                "description": "The device capabilities",
                "type": "Map<Capabilities>",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "models": ["Configuration", "Capabilities", "ImageFormat", "MdmRestrictions"]
        }
      ],
      "confirmAction": [
        {
          "direction": "fromapp",
          "summary": "This message is sent by the app to the client in order to resolve or reject promises.",
          "args": {
            "fields": [
              "@temporaryId",
              "@success",
              "@error"
            ]
          }
        }
      ],
      "contactDetail": [
        {
          "direction": "fromapp",
          "summary": "Respond with the contact details (e.g. system contact).",
          "args": {
            "fields": [
              {
                "field": "identity",
                "description": "The identity of the contact",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@success",
              "@error",
              "@temporaryId"
            ]
          },
          "data": {
            "description": "The data is optional if an error happened.",
            "fields": [
              {
                "field": "receiver",
                "description": "Receiver details",
                "type": "Map<ContactDetails>",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "models": ["ContactDetails", "SystemContact", "Email", "Phone"],
          "errorCodes": {
            "codes": {
              "invalidContact": "The identity is not a valid contact",
              "internalError": "The contact details could not be fetched due to an internal error"
            }
          }
        }
      ],
      "conversations": [
        {
          "direction": "fromapp",
          "summary": "Information about the active conversations.",
          "data": {
            "description": "The data value is an `Array<Conversation>`."
          },
          "models": [
            "Conversation",
            "Message",
            "Thumbnail",
            "MessageEvent",
            "Quote",
            "File",
            "Video",
            "Audio",
            "Location",
            "VoIP",
            "NotificationSettings",
            "NotificationSound",
            "NotificationDnd"
          ]
        }
      ],
      "messages": [
        {
          "direction": "fromapp",
          "summary": "A list of messages for a certain receiver.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "more",
                "description": "Whether more (older) messages are available",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "description": "The data value is an `Array<Message>`."
          },
          "models": ["Message", "Thumbnail", "MessageEvent", "Quote", "File", "Video", "Audio", "Location", "VoIP"]
        }
      ],
      "profile": [
        {
          "direction": "fromapp",
          "summary": "Return the user profile.",
          "data": {
            "fields": [
              {
                "field": "identity",
                "description": "User identity",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              {
                "field": "publicKey",
                "description": "User public key",
                "type": "Binary",
                "optional": false,
                "nullable": false
              },
              {
                "field": "publicNickname",
                "description": "User public nickname",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "avatar",
                "description": "User high res avatar",
                "type": "Binary",
                "optional": true,
                "nullable": false
              }
            ]
          }
        }
      ],
      "receivers": [
        {
          "direction": "fromapp",
          "summary": "Information about the available receivers (contacts, groups, distribution lists, etc).",
          "data": {
            "fields": [
              {
                "field": "contact",
                "description": "List of contact receivers",
                "type": "Array<Contact>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "group",
                "description": "List of group receivers",
                "type": "Array<Group>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "distributionList",
                "description": "List of distribution list receivers",
                "type": "Array<DistributionList>",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "models": ["Contact", "Group", "DistributionList", "ContactReceiverAccess", "GroupReceiverAccess", "DistributionListReceiverAccess"]
        }
      ],
      "thumbnail": [
        {
          "direction": "fromapp",
          "summary": "Respond with the thumbnail of a specified message.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              {
                "field": "messageId",
                "description": "The ID of the message for which we want the thumbnail",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "data": {
            "description": "Thumbnail bytes.<br>Format: maxsize=400x400px"
          }
        }
      ]
    },
    "update": {
      "connectionInfo": [
        {
          "direction": "bidirectional",
          "summary": "Send information about the current (and the former) connection.\n\nBoth sides MUST initially send this message and it MUST be waited for before sending any further messages. If a previous connection is being resumed, this MUST contain information about the previous connection. When a subsequent connection fails before the new connection ID has been established, the previous connection ID remains for an upcoming connection attempt. As soon as a new connection ID has been established, the ownership of the cached chunks will be transferred to the newly established connection ID. That way, only one former connection ID exists where cached chunks are assigned to.",
          "data": {
            "fields": [
              {
                "field": "id",
                "description": "The current [Connection ID](concept-connectionid.html)",
                "type": "Binary",
                "optional": false,
                "nullable": false
              },
              {
                "field": "resume",
                "description": "The previous connection to be resumed.\n\nIf the [Connection ID](concept-connectionid.html) does not match on both sides, the peers SHALL NOT send cached messages but discard them and treat the connection as a newly established web session.",
                "type": "Map<Connection>",
                "optional": true,
                "nullable": false
              }
            ]
          },
          "models": ["Connection"]
        }
      ],
      "connectionAck": [
        {
          "direction": "bidirectional",
          "summary": "Acknowledges a [Sequence Number](concept-sequencenumber.html).\n\nSHOULD be sent after either 10 seconds have elapsed once a chunk has been received or once some high water mark treshold regarding the size of the chunk has been exceeded since the last acknowledgement (whichever event occurs first).",
          "data": {
            "fields": [
              {
                "field": "sequenceNumber",
                "description": "The [Sequence Number](concept-sequencenumber.html) of the last message received during the connection",
                "type": "Integer (u32)",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "connectionDisconnect": [
        {
          "direction": "bidirectional",
          "summary": "Indicates that the sending peer is about to close the connection.",
          "data": {
            "fields": [
              {
                "field": "reason",
                "description": "The disconnect reason.\n\n- `\"stop\"`: The session SHALL be stopped by the receiving peer.\n- `\"delete\"`: The session MUST be stopped and deleted by the receiving peer.\n- `\"disable\"`: The web client has been disabled in the app and the receiving peer SHALL stop the session.\n- `\"replace\"`: The session has been replaced by another and the receiving peer MUST stop the session.\n- `\"error\"`: The session was stopped because an error occurred.",
                "type": "String",
                "enum": ["\"stop\"", "\"delete\"", "\"disable\"", "\"replace\"", "\"error\""],
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "alert": [
        {
          "direction": "fromapp",
          "summary": "An alert from the server or the app should be displayed.",
          "args": {
            "fields": [
              {
                "field": "source",
                "description": "The alert source",
                "type": "String",
                "enum": ["\"server\"", "\"device\""],
                "optional": false,
                "nullable": false
              },
              {
                "field": "type",
                "description": "The alert type",
                "type": "String",
                "enum": ["\"error\"", "\"warning\"", "\"info\""],
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "fields": [
              {
                "field": "message",
                "description": "The alert message",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "avatar": [
        {
          "direction": "fromapp",
          "summary": "Update the low-res avatar of a specified receiver.<br>The client should clear the cached high res avatar on receiving this message.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId"
            ]
          },
          "data": {
            "description": "To set a new avatar, send the avatar bytes (type `Binary`). To clear the avatar, send no data field at all."
          }
        }
      ],
      "batteryStatus": [
        {
          "direction": "fromapp",
          "summary": "Send a battery status update.\n\nNote: This message should only be sent by the app if a connection is currently established. It should *not* result in a [session resumption](concept-sessionresumption.html).",
          "data": {
            "fields": [
              {
                "field": "percent",
                "description": "The battery charge in percent (0-100).<br>If the battery charge cannot be determined, send null.",
                "type": "Integer",
                "optional": false,
                "nullable": true
              },
              {
                "field": "isCharging",
                "description": "A flag indicating whether the battery is charging",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "conversation": [
        {
          "direction": "toapp",
          "summary": "Update a conversation.",
          "response": "response/confirmAction and update/conversation",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "isStarred",
                "description": "Is the conversation starred?",
                "type": "Boolean",
                "optional": true,
                "nullable": false
              }
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidConversation": "Conversation was not found",
              "badRequest": "Invalid request"
            }
          }
        },
        {
          "direction": "fromapp",
          "summary": "Send an updated conversation to the client.",
          "args": {
            "fields": [
              "@updateMode",
              "@temporaryIdOptional"
            ]
          },
          "data": {
            "description": "A Map<[Conversation](#model.Conversation)>"
          },
          "models": [
            "Conversation",
            "Message",
            "Thumbnail",
            "MessageEvent",
            "Quote",
            "File",
            "Video",
            "Audio",
            "Location",
            "VoIP",
            "NotificationSettings",
            "NotificationSound",
            "NotificationDnd"
          ]
        }
      ],
      "contact": [
        {
          "direction": "toapp",
          "summary": "Update a contact.",
          "response": "update/contact",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The contact identity",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "firstName",
                "description": "The first name",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "lastName",
                "description": "The last name",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "avatar",
                "description": "The avatar in high resolution (max 512x512px)",
                "type": "Binary",
                "optional": true,
                "nullable": false
              }
            ]
          }
        },
        {
          "direction": "fromapp",
          "summary": "Send an updated contact to the client.",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The contact identity",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryIdOptional"
            ]
          },
          "data": {
            "fields": [
              "@successUpdate",
              {
                "field": "receiver",
                "description": "The updated contact (if update succeeded)",
                "type": "Map<Contact>",
                "optional": true,
                "nullable": false
              },
              "@error"
            ]
          },
          "models": ["Contact", "ContactReceiverAccess"],
          "errorCodes": {
            "codes": {
              "invalidContact": "The identity is not a valid contact",
              "notAllowedLinked": "The contact is linked with a system contact, updating is not allowed",
              "notAllowedBusiness": "The contact is a business account, updating the avatar is not allowed",
              "internalError": "The contact could not be updated due to an internal error"
            }
          }
        }
      ],
      "group": [
        {
          "direction": "toapp",
          "summary": "Update a group.",
          "response": "update/group",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The group id",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "members",
                "description": "The list of group members",
                "type": "Array<String>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "name",
                "description": "The group name (`null` to clear)",
                "type": "String",
                "optional": true,
                "nullable": true
              },
              {
                "field": "avatar",
                "description": "The high res avatar (`null` to clear)",
                "type": "Binary",
                "optional": true,
                "nullable": true
              }
            ]
          }
        },
        {
          "direction": "fromapp",
          "summary": "Send an updated group to the client.",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The group id",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryIdOptional"
            ]
          },
          "data": {
            "fields": [
              "@successUpdate",
              {
                "field": "receiver",
                "description": "The updated group (if update succeeded)",
                "type": "Map<Group>",
                "optional": true,
                "nullable": false
              },
              {
                "field": "error",
                "description": "An error code (if update failed)",
                "type": "String",
                "optional": true,
                "nullable": false
              }
            ]
          },
          "models": ["Group", "GroupReceiverAccess"],
          "errorCodes": {
            "codes": {
              "invalidGroup": "Group not found",
              "noMembers": "Empty member list submitted",
              "notAllowed": "Only the admin is allowed to change a group",
              "badRequest": "Invalid request",
              "internalError": "The group could not be updated due to an internal error"
            }
          }
        }
      ],
      "distributionList": [
        {
          "direction": "toapp",
          "summary": "Update a distribution list.",
          "response": "update/distributionList",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The distribution list id",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryId"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "members",
                "description": "The list of distribution list members",
                "type": "Array<String>",
                "optional": false,
                "nullable": false
              },
              {
                "field": "name",
                "description": "The distribution list name (`null` to clear)",
                "type": "String",
                "optional": true,
                "nullable": true
              },
              {
                "field": "avatar",
                "description": "The high res avatar (`null` to clear)",
                "type": "Binary",
                "optional": true,
                "nullable": true
              }
            ]
          }
        },
        {
          "direction": "fromapp",
          "summary": "Send an updated distribution list to the client.",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The distribution list id",
                "type": "String",
                "optional": false,
                "nullable": false
              },
              "@temporaryIdOptional"
            ]
          },
          "data": {
            "fields": [
              "@successUpdate",
              {
                "field": "receiver",
                "description": "The updated distribution list (if update succeeded)",
                "type": "Map<DistributionList>",
                "optional": true,
                "nullable": false
              },
              {
                "field": "error",
                "description": "An error code (if update failed)",
                "type": "String",
                "optional": true,
                "nullable": false
              }
            ]
          },
          "models": ["DistributionList", "DistributionListReceiverAccess"],
          "errorCodes": {
            "codes": {
              "invalidDistributionList": "Distribution list not found",
              "noMembers": "Empty member list submitted",
              "badRequest": "Invalid request",
              "internalError": "The distribution list could not be updated due to an internal error"
            }
          }
        }
      ],
      "messages": [
        {
          "direction": "fromapp",
          "summary": "Update one or more messages.",
          "args": {
            "fields": [
              "@receiverType",
              "@receiverId",
              "@updateMode"
            ]
          },
          "data": {
            "description": "Array<Map<[Message](#model.Message)>><br><br>Note: If the mode is \"removed\", then the app can strip out all optional fields from the message."
          },
          "models": [
            "Message",
            "Thumbnail",
            "MessageEvent",
            "Quote",
            "File",
            "Video",
            "Audio",
            "Location",
            "VoIP"
          ]
        }
      ],
      "profile": [
        {
          "direction": "bidirectional",
          "summary": "Used to update the user profile.",
          "response": "When sent from the app to the client, no reply is sent.<br>When sent from the client to the app, a response/confirmAction is returned.",
          "args": {
            "fields": [
              "@temporaryIdOptional"
            ]
          },
          "data": {
            "fields": [
              {
                "field": "publicNickname",
                "description": "The user nickname",
                "type": "String",
                "optional": true,
                "nullable": false
              },
              {
                "field": "avatar",
                "description": "The high res user avatar.<br>Format (app -> client): App determined, max 512x512px<br>Format (client -> app): PNG, max 512x512px<br>Set the value to `null` in order to remove the avatar.",
                "type": "Binary",
                "optional": true,
                "nullable": true
              }
            ]
          },
          "errorCodes": {
            "codes": {
              "invalidAvatar": "Avatar is invalid (e.g. 0 bytes)",
              "internalError": "An internal error occurred"
            }
          }
        }
      ],
      "receiver": [
        {
          "direction": "fromapp",
          "summary": "Sent when a receiver has been changed.",
          "args": {
            "fields": [
              "@receiverId",
              "@receiverTypeWithoutMe",
              "@updateMode"
            ]
          },
          "data": {
            "description": "The receiver (Map<[Contact](#model.Contact)|[Group](#model.Group)|[DistributionList](#model.DistributionList)>)."
          },
          "models": [
            "Contact",
            "ContactReceiverAccess",
            "Group",
            "GroupReceiverAccess",
            "DistributionList",
            "DistributionListReceiverAccess"
          ]
        }
      ],
      "receivers": [
        {
          "direction": "fromapp",
          "summary": "Sent when a contact / group / distribution list is changed and should be replaced.",
          "args": {
            "fields": [
              "@receiverTypeWithoutMe"
            ]
          },
          "data": {
            "description": "The list of receivers (Array<[Contact](#model.Contact)|[Group](#model.Group)|[DistributionList](#model.DistributionList)>)."
          },
          "models": [
            "Contact",
            "ContactReceiverAccess",
            "Group",
            "GroupReceiverAccess",
            "DistributionList",
            "DistributionListReceiverAccess"
          ]
        }
      ],
      "typing": [
        {
          "direction": "bidirectional",
          "summary": "Sent if a contact is typing or if we are typing in a conversation with a contact.",
          "args": {
            "fields": [
              {
                "field": "id",
                "description": "The contact identity",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "fields": [
              {
                "field": "isTyping",
                "description": "Whether typing has started (`true`) or stopped (`false`)",
                "type": "Boolean",
                "optional": false,
                "nullable": false
              }
            ]
          }
        }
      ],
      "voipStatus": [
        {
          "direction": "fromapp",
          "summary": "Sent when the VoIP status changes (e.g. when a call is started).",
          "args": {
            "fields": [
              {
                "field": "type",
                "description": "The status type",
                "type": "String",
                "optional": false,
                "nullable": false
              }
            ]
          },
          "data": {
            "description": "A Map<[VoipRinging](#model.VoipRinging)|[VoipStarted](#model.VoipStarted)|[VoipFinished](#model.VoipFinished)|[VoipRejected](#model.VoipRejected)|[VoipMissed](#model.VoipMissed)|[VoipAborted](#model.VoipAborted)>, depending on the type."
          },
          "models": [
            "VoipRinging",
            "VoipStarted",
            "VoipFinished",
            "VoipRejected",
            "VoipMissed",
            "VoipAborted"
          ]
        }
      ]
    }
  },
  "concepts": {
    "procedures": {
      "name": "General Procedures",
      "summary": "General procedures that need to be followed.",
      "description": "After a SaltyRTC `close` message has been received, all subsequent messages MUST be discarded. Furthermore, usage of the SaltyRTC `application` message is forbidden when the SaltyRTC task `v0.relayed-data.tasks.saltyrtc.org` is being used. This guarantees us that no SaltyRTC client-to-client messages can be received in between any specific messages of this protocol.  \nNote: We are planning to remove this restriction with a new SaltyRTC version that supports multiple channels. This would also allow us to move meta messages, such as the ones prefixed by `connection*`, into a different channel."
    },
    "temporaryId": {
      "name": "Temporary IDs",
      "summary": "An identifier to link responses to requests.",
      "description": "The App Remote Protocol is an asynchronous protocol. In contrast to protocols like HTTP, messages are unidirectional and there are no direct responses. But in some cases we want to send responses that reference a certain request. For example, when requesting the avatar of two contacts (see [`request/avatar`](message-request-avatar-toapp.html)), we want to be able to link a responses (see [`response/avatar`](message-response-avatar-fromapp.html)) to the corresponding request.\n\nTo achieve that, the peer that sends the request generates an opaque random string called the \"Temporary ID\". This field is sent along with the request and will be copied into the response by the peer."
    },
    "connectionId": {
      "name": "Connection ID",
      "summary": "The identifier of a specific connection.",
      "description": "The connection ID uniquely identifies a single connection. It allows to associate chunks to a specific connection in order to be able to resume the session. A more detailed explanation of the role of the connection ID is stated in the description of the [Sequence Number](concept-sequencenumber.html).\nThe ID is derived by using the established SaltyRTC session key (the private key of this peer and the public key of the other peer) by encrypting an empty byte sequence with the nonce `connectionidconnectionid`. The resulting 16 bytes are the connection ID."
    },
    "sequenceNumber": {
      "name": "Sequence Number",
      "summary": "The sequence number counter of the underlying transport for incoming/outgoing chunks.",
      "description": "The sequence number counters are being used to be able to resume a session after the connection has been severed. They do not directly map to messages but to chunks sent over the network (e.g. a message usually contains multiple chunks and therefore multiple sequence numbers).\n\nOnce the connection is set up, both peers MUST asynchronously send a [`connectionInfo`](message-update-connectionInfo-bidirectional.html) message before sending any other messages. On receiving the connection info of the remote peer, if the `connectionInfo.data.resume` field is present and `connectionInfo.data.resume.id` of the remote peer's message equals the one sent in the local message, the peers SHALL try to resume a session. In any other case, [cached chunks](concept-chunkcache.html) SHALL be discarded and the connection MUST be treated as a newly established web session.\n\nTo resume a session, the peer first compares the received `connectionInfo.data.resume.sequenceNumber` with the sequence number for outgoing chunks of the former connection. All cached chunks before this sequence number SHALL be discarded. In addition, each cached chunks that has been tagged by the [blacklist](concept-chunkcacheblacklist.html) SHALL be discarded from the cache. The remaining cached chunks MUST be transferred to the current connection by assigning the current outgoing sequence number counter as an offset to the cached chunks.  \nFor example, if there are three cached chunks with the former sequence numbers of `5, 6, 7` and the last used outgoing sequence number (the one used for sending the last `connectionInfo` chunk) is `11`, they will be remapped to the sequence numbers `12, 13, 14`. This will prevent losing cached chunks in case the newly established connection is being severed as well before all cached chunks have been sent.  \nNow, the cached chunks MUST be sent in order to the other peer. Other chunks of newly created messages SHALL NOT interfere with the order and MUST be appended to the chunk cache as well.\n\nIn addition, a peer SHOULD periodically report the current sequence number for incoming chunks to the other peer by sending a [`connectionAck` update](message-update-connectionAck-bidirectional.html) 10 seconds after a chunk has been received or immediately once 20 chunks have been received. This allows the other peer to remove cached chunks that have been acknowledged. However, a peer MUST respond with a `connectionAck` update in case the other peer explicitly sends a [`connectionAck` request](message-request-connectionAck-bidirectional.html)."
    },
    "chunkCache": {
      "name": "Chunk Cache",
      "summary": "How messages will be cached as chunks.",
      "description": "Each peer MUST cache **all** chunks that are part of an outgoing message, irrespective of whether the connection is still alive or has already been severed. The peer MUST also remember the associated sequence number. In order to do so, the peer can store the outgoing sequence number before the chunk cache has been created. Then, chunks can be appended to the cache. Chunks of messages that are in the [Chunk Cache Blacklist](concept-chunkcacheblacklist.html) MUST also be added to the cache and specifically tagged as *blacklisted* chunks. Alternatively, a placeholder for the blacklisted chunks can be added to the cache which explicitly tags chunks as blacklisted.\n\nWhen a [`update/connectionAck`](message-update-connectionAck-bidirectional.html) message has been received, the cache MUST be updated by removing all cached chunks that have been acknowledged.\n\nIf memory usage of the chunk cache is becoming an issue for a peer, it SHOULD explicitly request an acknowledgement by sending a [`request/connectionAck`](message-request-connectionAck-bidirectional.html)."
    },
    "chunkCacheBlacklist": {
      "name": "Chunk Cache Blacklist",
      "summary": "Chunks of messages that are blacklisted.",
      "description": "Messages whose chunks SHALL be purged from the chunk cache once a session is being resumed:\n\n- `request/connectionAck`\n- `update/batteryStatus`\n- `update/connectionAck`\n- `update/connectionDisconnect`\n- `update/connectionInfo`\n- `update/typing`\n\nNote: It is crucial that the chunks (or placeholders) of those messages are still added to the chunk cache to keep the peer's sequence numbers in sync. It ensures that only the acknowledged chunks are being removed from the chunk cache once a [`update/connectionAck`](message-update-connectionAck-bidirectional.html) has been received."
    },
    "sessionResumption": {
      "name": "Session Resumption",
      "summary": "When and how to reconnect a session.",
      "description": "Session resumption happens, when a new connection for an existing session is established.\n\n### Reconnect Types\n\n We differentiate between two types of session resumption: A wakeup and a full reconnect.\n\n- **Full Reconnect**: During a full reconnect, the [chunk cache](concept-chunkcache.html) is not used. All initial data is sent again and the connection is treated as if the session were newly created.\n- **Wakeup**: When doing a wakeup, the initial data is *not* transferred again. The [chunk cache](concept-chunkcache.html) is transferred from the previous connection to the new connection (both identified with a unique [connection ID](concept-connectionid.html)) See [sequence number](concept-sequencenumber.html) for more details.\n\n### Reconnect Triggers\n\nSession resumption is triggered in one of the following cases:\n\n#### Triggered by App\n\n- A session is currently active, but disconnected, AND\n- An outgoing message to the client is enqueued\n\nAs an example, when a new incoming Threema message from a contact arrives, that will result in a new [`update/messages`](message-update-messages-fromapp.html) message being enqueued for the client. If at that point in time a session is active but not connected, the session resumption is triggered.\n\n#### Triggered by Push\n\n- A wakeup push message arrives\n\n#### Triggered Manually\n\n- The user manually starts the session from the Threema app"
    }
  }
}
